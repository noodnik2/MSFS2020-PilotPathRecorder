@{

  @using System;

  var query = Model.query;

  if (!query.ContainsKey("flightId") || !query.ContainsKey("seq")) {
    Console.WriteLine("oops - required parameter(s) not present");
    return;
  }

  var hackLast = new Func<string, string>(
    s => {
      var k = s.Split(',');
      return k[k.Length - 1];
    }
  );

  var flightIdLast = hackLast.Invoke(query["flightId"]);
  var seqLast = hackLast.Invoke(query["seq"]);

  Console.WriteLine($"flightIdLast({flightIdLast})");
  Console.WriteLine($"seqLast({seqLast})");

  var lastSeq = long.Parse(seqLast);
  var flightId = int.Parse(flightIdLast);

  var updates = Model.getMultitrackUpdates(flightId, lastSeq);

  var nextSeq = (
    updates.Length == 0
  ? lastSeq
  : updates[updates.Length - 1].seq
  );

}
<?xml version='1.0' encoding='UTF-8'?>
<kml
  xmlns='http://www.opengis.net/kml/2.2'
  xmlns:gx='http://www.google.com/kml/ext/2.2'
>
  <NetworkLinkControl>
    <cookie>seq=@nextSeq&amp;flightId=@flightId</cookie>
    <Update>
      <targetHref>http://localhost:8000/mc.init</targetHref>
      <Create>
        <gx:MultiTrack targetId='pp'>
          <gx:Track>
            @foreach (var update in updates) {
            <when>
              @(new DateTime(@update.seq).ToUniversalTime().ToString("o"))
            </when>
            }
            @foreach (var update in updates) {
            <gx:coord>
              @update.longitude
              @update.latitude
              @update.altitude
            </gx:coord>
            }
            @foreach (var update in updates) {
            <gx:angles>
              @update.heading
              @update.tilt
              @update.roll
            </gx:angles>
            }
          </gx:Track>
        </gx:MultiTrack>
      </Create>
    </Update>
  </NetworkLinkControl>
</kml>